#Requires AutoHotkey v2.0
#SingleInstance Force

; Language-independent test suite for RBTrayCmd.ahk2 with proper state verification
class RBTrayTest {
    static testResults := []
    static mainAppPid := 0
    static notepadPid := 0
    static calcPid := 0
    static calcHwnd := 0  ; Store calculator window handle
    
    static Run() {
        try {
            this.Log("=== Starting RBTrayCmd Test Suite ===")
            this.Setup()
            
            this.Log("Running test: Hide by exe name")
            this.TestHideByExe()
            Sleep(500)  ; Brief pause between tests
            
            this.Log("Running test: Hide by class")
            this.TestHideByClass()
            Sleep(500)
            
            this.Log("Running test: Hide by title")
            this.TestHideByTitle()
            Sleep(500)
            
            this.Log("Running test: Hide by PID")
            this.TestHideByPid()
            Sleep(500)
            
            this.Log("Running test: Restore by exe")
            this.TestRestoreByExe()
            Sleep(500)
            
            this.Log("Running test: Restore all")
            this.TestRestoreAll()
            Sleep(500)
            
            this.Log("Running test: List")
            this.TestList()
            Sleep(500)
            
            this.Log("Running test: Invalid selectors")
            this.TestInvalidSelectors()
            
            this.Log("=== Test execution completed ===")
            this.Log("Total tests executed: " . this.testResults.Length)
        } catch as e {
            this.Log("✗ Critical error during test execution: " . e.Message)
            this.testResults.Push({name: "Test Execution", passed: false, details: "Critical error: " . e.Message})
        }
        
        this.ShowResults()
        this.Cleanup()
    }
    
    static Setup() {
        ; Start RBTray main app
        try {
            ; Use full path to AutoHotkey and RBTray script
            rbtrayPath := A_ScriptDir . "\RBTray.ahk2"
            this.Log("Attempting to start RBTray at: " . rbtrayPath)
            
            Run('"' . A_AhkPath . '" "' . rbtrayPath . '" --debug', , , &pid)
            this.mainAppPid := pid
            Sleep(2000) ; Longer wait for main app to initialize
            
            this.Log("✓ Setup: RBTray main app started (PID: " . pid . ")")
            this.Log("  System Language: " . A_Language . " (0x" . Format("{:X}", A_Language) . ")")
            
            ; Verify RBTray is actually running by checking for its window
            Sleep(1000)
            rbtrayHwnd := WinExist("RBTray_MessageWindow")
            if rbtrayHwnd {
                this.Log("✓ RBTray message window found: " . rbtrayHwnd)
            } else {
                this.Log("⚠ Warning: RBTray message window not found")
                ; Try alternative methods
                rbtrayHwnd := WinExist("RBTray ahk_class AutoHotkeyGUI")
                if rbtrayHwnd {
                    this.Log("✓ RBTray GUI window found: " . rbtrayHwnd)
                } else {
                    this.Log("✗ No RBTray windows found - RBTray may not be running properly")
                }
            }
        } catch as e {
            this.Log("✗ Setup Failed: " . e.Message)
            this.ShowResults()
            ExitApp
        }
        
        ; Open test windows
        Run("notepad.exe", , , &notepadPid)
        this.Log("Attempting to create notepad with PID: " . notepadPid)
        
        ; Wait for process first, then window
        Sleep(500)
        
        ; Try different methods to find the window
        windowFound := false
        notepadTitle := ""
        
        ; Method 1: Wait by PID
        if WinWait("ahk_pid " . notepadPid, , 3) {
            windowFound := true
            this.Log("Found window by PID")
        } else {
            this.Log("Method 1 failed: WinWait by PID timeout")
            
            ; Method 2: Check if any notepad windows exist
            if WinExist("ahk_exe notepad.exe") {
                windowFound := true
                this.Log("Found window by exe name")
                ; Try to get the actual PID of found window
                try {
                    foundPid := WinGetPID("ahk_exe notepad.exe")
                    this.Log("Found notepad PID: " . foundPid)
                    if foundPid == notepadPid {
                        this.Log("PIDs match!")
                    } else {
                        this.Log("PID mismatch - using found window")
                        notepadPid := foundPid
                    }
                } catch {
                    this.Log("Could not get PID of found window")
                }
            }
        }
        
        if windowFound {
            this.notepadPid := notepadPid
            Sleep(500)
            
            try {
                notepadTitle := WinGetTitle("ahk_pid " . notepadPid)
                this.Log("Got window title: " . notepadTitle)
            } catch as e {
                notepadTitle := "Notepad (title unavailable)"
                this.Log("Could not get title: " . e.Message)
            }
            
            this.Log("✓ Setup: Notepad created (" . notepadPid . "): " . notepadTitle)
        } else {
            this.Log("✗ Setup Failed: Could not create notepad window after trying multiple methods")
            this.Log("Process still running: " . ProcessExist(notepadPid))
            
            ; Try to continue anyway for debugging
            this.notepadPid := notepadPid
            this.Log("Continuing with tests despite setup failure...")
        }
        
        ; Skip calculator creation - it was causing RBTray to crash due to ApplicationFrameHost.exe
        this.calcPid := 0
        this.calcHwnd := 0
        this.Log("  Calculator skipped (known to cause issues with RBTray)")
        Sleep(500)
    }
    
    static TestHideByExe() {
        this.RunHideRestoreTest("Hide by exe name", "hide:notepad.exe", "restore:notepad.exe", "Hide and restore both successful")
    }
    
    static TestHideByClass() {
        selector := "ahk_pid " . this.notepadPid
        try {
            actualClass := WinGetClass(selector)
        } catch {
            actualClass := ""
        }
        if !actualClass {
            this.RecordTestFailure("Hide by window class", "Cannot get window class: Target window not found.")
            return
        }
        classSelector := "ahk_class " . actualClass
        this.RunHideRestoreTest("Hide by window class", "hide:" . classSelector, "restore:" . classSelector, "Class: " . actualClass)
    }
    
    static TestHideByTitle() {
        selector := "ahk_pid " . this.notepadPid
        try {
            actualTitle := WinGetTitle(selector)
        } catch {
            actualTitle := ""
        }
        if !actualTitle {
            this.RecordTestFailure("Hide by window title", "Cannot get window title: Target window not found.")
            return
        }
        actualTitle := Trim(actualTitle)
        this.RunHideRestoreTest("Hide by window title", "hide:" . actualTitle, "restore:" . actualTitle, "Title: " . actualTitle)
    }
    
    static TestHideByPid() {
        selector := "ahk_pid " . this.notepadPid
        this.RunHideRestoreTest("Hide by PID", "hide:" . selector, "restore:" . selector, "PID: " . this.notepadPid)
    }
    
    static TestRestoreByExe() {
        testName := "Restore by exe name"
        
        ; First hide a window
        this.RunCmd("hide:notepad.exe")
        Sleep(500)
        
        ; Now restore
        this.RunCmd("restore:notepad.exe")
        Sleep(1000)
        
        visibleCount := WinGetCount("ahk_exe notepad.exe")
        
        if visibleCount > 0 {
            this.Log("✓ " . testName . ": Window restored successfully")
            this.testResults.Push({name: testName, passed: true, details: "Restored notepad windows: " . visibleCount})
            this.LogResult(testName, true, "Restored notepad windows: " . visibleCount)
        } else {
            this.Log("✗ " . testName . ": Window not restored")
            this.testResults.Push({name: testName, passed: false, details: "No visible notepad windows"})
            this.LogResult(testName, false, "No visible notepad windows")
        }
    }
    
    static TestRestoreAll() {
        testName := "Restore all windows"
        
        ; First hide multiple windows
        this.RunCmd("hide:notepad.exe")
        Sleep(500)
        if this.calcPid && WinExist("ahk_pid " . this.calcPid) {
            this.RunCmd("hide:calc.exe")
            Sleep(500)
        }
        
        ; Now restore all
        this.RunCmd("restore_all")
        Sleep(1500)
        
        notepadVisible := WinGetCount("ahk_exe notepad.exe") > 0
        calcVisible := !this.calcPid || WinExist("ahk_pid " . this.calcPid)
        
        if notepadVisible {
            this.Log("✓ " . testName . ": Windows restored")
            this.testResults.Push({name: testName, passed: true, details: "Notepad visible: " . (notepadVisible ? "yes" : "no")})
        } else {
            this.Log("✗ " . testName . ": Some windows not restored")
            this.testResults.Push({name: testName, passed: false, details: "Notepad not visible"})
        }
    }
    
    static TestList() {
        testName := "List hidden windows"
        
        ; Hide a window first
        this.RunCmd("hide:notepad.exe")
        Sleep(1000)
        
        ; List command will show a MsgBox, we can't easily verify it
        ; Just run the command to ensure it doesn't error
        this.RunCmd("list")
        Sleep(500)
        
        this.Log("✓ " . testName . ": Command executed (manual verification needed)")
        this.testResults.Push({name: testName, passed: true, details: "List command executed"})
        
        ; Restore for cleanup
        this.RunCmd("restore:notepad.exe")
        Sleep(500)
    }
    
    
    static TestInvalidSelectors() {
        testName := "Invalid selectors"
        
        ; Test with non-existent window
        this.RunCmd("hide:nonexistentwindow12345.exe")
        Sleep(500)
        
        ; Test with invalid PID
        this.RunCmd("hide:ahk_pid 999999")
        Sleep(500)
        
        ; Test with invalid class
        this.RunCmd("hide:ahk_class NonExistentWindowClass123")
        Sleep(500)
        
        ; If no crash occurred, test passed
        this.Log("✓ " . testName . ": Handled invalid selectors gracefully")
        this.testResults.Push({name: testName, passed: true, details: "No crashes with invalid inputs"})
    }
    
    static RunCmd(args) {
        this.Log("  Executing: RBTrayCmd.ahk2 " . args)
        
        if !ProcessExist(this.mainAppPid) {
            this.Log("  WARNING: Main RBTray app is not running!")
            return false
        }
        
        scriptPath := A_ScriptDir . "\RBTrayCmd.ahk2"
        cmdLine := '"' . A_AhkPath . '" "' . scriptPath . '" "' . args . '"'
        
        try {
            Run(cmdLine, , , &pid)
        } catch {
            this.Log("✗ Command failed to execute: " . args)
            return false
        }
        
        ; Wait for command processing - longer delay for hide operations
        Sleep(InStr(args, "restore") ? 1000 : 800)
        return true
    }
    
    static Cleanup() {
        ; Restore all hidden windows first
        this.RunCmd("restore_all")
        Sleep(1000)
        
        ; Simple cleanup - close test windows
        this.Log("Closing test windows...")
        
        ; Close notepad windows
        if this.notepadPid && WinExist("ahk_pid " . this.notepadPid) {
            try {
                WinClose("ahk_pid " . this.notepadPid)
            } catch {
            }
            this.Log("  Closed notepad PID: " . this.notepadPid)
        }
        
        ; Close any remaining notepad windows
        notepadCount := 0
        while WinExist("ahk_exe notepad.exe") && notepadCount < 5 {
            try {
                WinClose("ahk_exe notepad.exe")
            } catch {
            }
            notepadCount++
            Sleep(200)
        }
        if notepadCount > 0
            this.Log("  Closed " . notepadCount . " additional notepad windows")
        
        ; Terminate main app
        if this.mainAppPid
            ProcessClose(this.mainAppPid)
        
        this.Log("✓ Cleanup: Test environment cleaned")
    }
    
    static ShowResults() {
        totalTests := this.testResults.Length
        passedTests := 0
        
        for test in this.testResults {
            if test.passed
                passedTests++
        }
        
        resultText := "═══════════════════════════════════════════════════════`n"
        resultText .= "           RBTrayCmd Test Results`n"
        resultText .= "═══════════════════════════════════════════════════════`n`n"
        
        if totalTests == 0 {
            resultText .= "⚠ WARNING: No tests were executed!`n"
            resultText .= "This usually means there was a setup failure or critical error.`n"
            resultText .= "Check the debug output for more details.`n`n"
        } else {
            for test in this.testResults {
                status := test.passed ? "✓ PASS" : "✗ FAIL"
                resultText .= status . " : " . test.name . "`n"
                if test.HasProp("details") && test.details {
                    resultText .= "        → " . test.details . "`n"
                }
            }
        }
        
        resultText .= "`n═══════════════════════════════════════════════════════`n"
        resultText .= "Total: " . totalTests . " tests`n"
        
        passRate := totalTests > 0 ? Round(passedTests/totalTests*100, 1) : 0
        resultText .= "Passed: " . passedTests . " (" . passRate . "%)`n"
        resultText .= "Failed: " . (totalTests - passedTests) . "`n"
        resultText .= "═══════════════════════════════════════════════════════`n`n"
        resultText .= "System: Windows " . A_OSVersion . "`n"
        resultText .= "Language: " . A_Language . " (0x" . Format("{:X}", A_Language) . ")`n"
        resultText .= "═══════════════════════════════════════════════════════`n"
        
        ; Log the full results first
        this.Log("=== FINAL TEST RESULTS ===")
        this.Log("Total: " . totalTests . " tests")
        this.Log("Passed: " . passedTests . " (" . passRate . "%)")
        this.Log("Failed: " . (totalTests - passedTests))
        this.Log("")
        
        for test in this.testResults {
            status := test.passed ? "PASS" : "FAIL"
            this.Log(status . " : " . test.name)
            if test.HasProp("details") && test.details {
                this.Log("  -> " . test.details)
            }
        }
        this.Log("=== END RESULTS ===")
        
        ; Also log to separate results file for easy viewing
        try {
            logDir := A_ScriptDir . "\logs"
            if !DirExist(logDir)
                DirCreate(logDir)
            resultLog := logDir . "\RBTrayTest_Results.log"
            
            ; Build complete log content first, then write once
            logContent := A_Now . " - Test Results:`n"
            logContent .= "Total: " . totalTests . " | Passed: " . passedTests . " (" . passRate . "%) | Failed: " . (totalTests - passedTests) . "`n"
            for test in this.testResults {
                status := test.passed ? "PASS" : "FAIL"
                logContent .= status . " : " . test.name
                if test.HasProp("details") && test.details {
                    logContent .= " -> " . test.details
                }
                logContent .= "`n"
            }
            logContent .= "=" . StrReplace(Format("{:50s}", ""), " ", "=") . "`n`n"
            
            ; Safe single write with retry
            try {
                FileAppend(logContent, resultLog)
            } catch {
                Sleep(50)
                try {
                    FileAppend(logContent, resultLog)
                } catch {
                    ; Silent fail
                }
            }
        } catch {
        }
        
        MsgBox(resultText, "Test Results", "Icon" . (passedTests == totalTests ? "!" : "X"))
    }
    
    static Log(message) {
        ; Output to both debug and console for better visibility
        OutputDebug(message . "`n")
        ; Also write to a temp file for debugging
        try {
            logDir := A_ScriptDir . "\logs"
            if !DirExist(logDir)
                DirCreate(logDir)
            try {
                FileAppend(A_Now . ": " . message . "`n", logDir . "\RBTrayTest_Debug.log")
            } catch {
                Sleep(50)
                try {
                    FileAppend(A_Now . ": " . message . "`n", logDir . "\RBTrayTest_Debug.log")
                } catch {
                    ; Silent fail
                }
            }
        } catch {
        }
    }
    
    static LogResult(testName, passed, details := "") {
        ; Log test results immediately to separate file
        try {
            status := passed ? "PASS" : "FAIL"
            resultMsg := status . " : " . testName
            if details
                resultMsg .= " -> " . details
            logDir := A_ScriptDir . "\logs"
            if !DirExist(logDir)
                DirCreate(logDir)
            try {
                FileAppend(A_Now . ": " . resultMsg . "`n", logDir . "\RBTrayTest_Results.log")
            } catch {
                Sleep(50)
                try {
                    FileAppend(A_Now . ": " . resultMsg . "`n", logDir . "\RBTrayTest_Results.log")
                } catch {
                    ; Silent fail
                }
            }
        } catch {
        }
    }
    ; Helper functions for proper window state verification
    static IsWindowVisible(selector) {
        ; Simple visibility check
        if !WinExist(selector)
            return false
        try {
            minMax := WinGetMinMax(selector)
        } catch {
            minMax := -1
        }
        return minMax != -1  ; Not minimized
    }
    
    static WaitForWindowVisible(selector, timeoutMs := 5000) {
        ; Wait for window to become visible with timeout
        startTime := A_TickCount
        while (A_TickCount - startTime) < timeoutMs {
            if this.IsWindowVisible(selector) {
                this.Log("    Window became visible: " . selector)
                Sleep(500)  ; Extra wait for window to be fully ready
                return true
            }
            Sleep(150)
        }
        this.Log("    Timeout waiting for window to become visible: " . selector)
        return false
    }
    
    static WaitForWindowHidden(selector, timeoutMs := 6000) {
        ; Wait for window to become hidden with timeout
        startTime := A_TickCount
        while (A_TickCount - startTime) < timeoutMs {
            if !this.IsWindowVisible(selector) {
                this.Log("    Window became hidden: " . selector)
                Sleep(500)  ; Extra wait for hide operation to complete
                return true
            }
            Sleep(200)  ; Increased polling interval
        }
        this.Log("    Timeout waiting for window to become hidden: " . selector)
        return false
    }
    
    static EnsureWindowVisible(selector) {
        this.Log("    Checking if window is visible: " . selector)
        
        if this.IsWindowVisible(selector) {
            this.Log("    Window is already visible")
            return true
        }
        
        ; Try restore_all and wait
        this.Log("    Window not visible, attempting restore_all")
        if !this.RunCmd("restore_all")
            return false
            
        if this.WaitForWindowVisible(selector, 5000)
            return true
        
        ; Final attempt: direct activation
        this.Log("    Final attempt: direct window activation")
        try {
            WinShow(selector)
            Sleep(500)
            WinActivate(selector)
        } catch {
        }
        Sleep(500)
        return this.IsWindowVisible(selector)
    }
    
    ; Common test execution functions
    static RunHideRestoreTest(testName, hideCmd, restoreCmd, successDetails) {
        selector := "ahk_pid " . this.notepadPid
        
        ; Step 1: Pre-condition check
        this.Log("  Step 1: Pre-condition check")
        if !this.EnsureWindowVisible(selector) {
            this.RecordTestFailure(testName, "Pre-condition failed: window not visible")
            return
        }
        
        ; Step 2: Execute hide command
        this.Log("  Step 2: Executing hide command")
        if !this.RunCmd(hideCmd) {
            this.RecordTestFailure(testName, "Hide command execution failed")
            return
        }
        
        ; Step 3: Verify window is hidden
        this.Log("  Step 3: Verifying window is hidden")
        if !this.WaitForWindowHidden(selector, 6000) {
            this.RecordTestFailure(testName, "Window still visible after hide")
            return
        }
        
        ; Step 4: Execute restore command
        this.Log("  Step 4: Executing restore command")
        if !this.RunCmd(restoreCmd) {
            this.RecordTestFailure(testName, "Restore command execution failed")
            return
        }
        
        ; Step 5: Verify window is restored
        this.Log("  Step 5: Verifying window is restored")
        if !this.WaitForWindowVisible(selector, 5000) {
            this.RecordTestFailure(testName, "Window not restored after restore")
            return
        }
        
        this.RecordTestSuccess(testName, successDetails)
    }
    
    static RecordTestSuccess(testName, details) {
        this.Log("✓ " . testName . ": All steps completed successfully")
        this.testResults.Push({name: testName, passed: true, details: details})
        this.LogResult(testName, true, details)
    }
    
    static RecordTestFailure(testName, details) {
        this.Log("✗ " . testName . ": " . details)
        this.testResults.Push({name: testName, passed: false, details: details})
        this.LogResult(testName, false, details)
    }
}

; Run tests
RBTrayTest.Run()
ExitApp